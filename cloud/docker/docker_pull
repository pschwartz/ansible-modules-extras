#!/usr/bin/python2
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: docker_pull
short_description: pull docker images
description:
    - Retrieve Docker images from remote sources.
version_added: ""
options:
  image:
    description:
      - The image to retrieve (including `repo` and `tag`)
    required: true
    default: null
    aliases: []
  registry_url:
    description:
      - A custom registry endpoint in the format [http|https]://[url]/[version_spec]
    required: false
    default: "https://index.docker.io/v1/"
    aliases: ['registry']
  docker_url:
    description:
      - An alternative URL to connect to the Docker daemon
    required: false
    default: unix:///var/run/docker.sock
    aliases: []
  username:
    description:
      - The registry username for the registry endpoint
    required: false
    default: null
    aliases: ['user']
  password:
    description:
      - The password for the registry endpoint
    required: false
    default: null
    aliases: ['pass','passwd']
  email:
    description:
      - The email associated with the login account
    required: false
    default: null
    aliases: ['email_address']
  all_tags:
    description:
      - Retrieve all tags associated with the image
    required: false
    default: false
    aliases: ['all']
'''

EXAMPLES = '''
# Basic Docker Pull from public registry (`latest` tag)
- docker_pull:
    image: busybox

# Pull a specific tag for a container
- docker_pull:
    image: busybox
    tag: buildroot-2014.02

# Pull all tags for an image
- docker_pull:
    image: busybox
    all_tags: true


# Pull from a private repository on Docker Hub using Authentication
- docker_pull:
    image: mycompany/myimage:1.0
    username: myuser
    password: mypassword
    email: myuser@mycompany.com

# Pull from a private registry
- docker_pull:
    image: myimage:2.0
    registry: https://docker.mycompany.com/v1/
    username: myuser
    password: mypassword
    email: myuser@mycompany.com
'''

import re

from urlparse import urlparse

HAS_DOCKER_PY = True
try:
    import docker
except ImportError:
    HAS_DOCKER_PY = False

REPO_REGEX = re.compile(
    r'^((?P<repo>.+)/|)(?P<image>[a-zA-Z0-9_\-]+)(:(?P<tag>.+)|)$'
)


class DockerManager:
    def __init__(self, module):
        self.module = module
        self.docker_url = urlparse(module.params.get('docker_url'))
        self.image = module.params.get('image')
        self.all_tags = module.params.get('all_tags')
        self.registry_url = module.params.get('registry_url')
        self.username = module.params.get('username')
        self.password = module.params.get('password')
        self.email = module.params.get('email')

        self.client = docker.Client(base_url=self.docker_url.geturl())
        if self.client is None:
            module.fail_json(msg="Failed to instantiate Docker client. This "
                                 "could mean that Docker isn't running.")

    def check_current_image(self):
        repo, image, tag = self.get_image_parts()
        
        image = "{image}:{tag}".format(image=image, tag=tag)
        image_id = None
        
        for _image in self.client.images():
            if image in _image['RepoTags']:
                image_id = _image['Id']

        self.current_image_id = image_id

    def get_image_parts(self):
        try:
            repo, image, tag = REPO_REGEX.match(self.image).group('repo',
                                                                  'image',
                                                                  'tag')
            if not tag:
                tag = 'latest'
                
            return (repo, image, tag)
        except Exception as e:
            self.module.fail_json(msg=e.message, image=self.image)

    def parse_result(self, result):
        error = False
        msg = "Success"
        changed = False

        output = list(result)

        # The success/fail message is usually in the last item of the
        # list, so we get it here. It will contain 'error' in keys
        # if it failed and 'status' if it succeeded or took no action
        status_line = json.loads(output.pop(-1))

        if 'error' in status_line.keys():
            self.error = True
            msg = status_line['error']
        else:
            msg = status_line['status']

        new_image_id = None
        repo, image, tag = self.get_image_parts()
        for image in self.client.images():
            if self.image in image['RepoTags']:
                new_image_id = image['Id']

        if new_image_id != self.current_image_id:
            changed = True

        return error, msg, changed, output

    def do_pull_tag(self):
        repo, image, tag = self.get_image_parts()
        pull_url = ''
        if repo:
            pull_url += repo + '/'
        pull_url += image

        # What tags do they want (defaults to 'latest' unless specified)
        # Errors if they request a tag AND all_tags=True
        if self.all_tags and tag:
            self.module.fail_json(msg="Cannot specify all_tags AND an image"
                                      " containing a tag")
        elif self.all_tags:
            tag = None
        elif not tag:
            tag = 'latest'

        try:
            # Pull with stream=True will return a generator. We cast it
            # to a list and process the results later
            result = self.client.pull(pull_url, tag=tag, stream=True)
        except:
            self.module.fail_json(msg="An unknown error occurred while pulling"
                                      " the docker image")

        return result

    def run(self):
        # Do we need to authenticate?
        if self.username:
            try:
                self.client.login(
                    self.username,
                    password=self.password,
                    email=self.email,
                    registry=self.registry_url
                )
            except:
                self.module.fail_json(
                    msg="Failed to login to the remote registry. "
                        "Check your username/password."
                )

        # Check and Note any existing image to compare to
        self.check_current_image()

        result = self.do_pull_tag()

        error, msg, changed, output = self.parse_result(result)

        if error:
            self.module.fail_json(
                msg="Image failed to pull",
                error=msg,
                changed=changed,
                output=output
            )
        else:
            self.module.exit_json(
                msg=msg,
                changed=changed,
                success=True,
                output=output
            )


def main():
    argument_spec = dict(
        image=dict(type='str'),
        username=dict(default=None, aliases=['user']),
        password=dict(default=None, aliases=['pass', 'passwd']),
        email=dict(default=None),
        docker_url=dict(default='unix://var/run/docker.sock'),
        registry_url=dict(default='https://index.docker.io/v1/'),
        all_tags=dict(default=False, type='bool')
    )

    module = AnsibleModule(argument_spec=argument_spec)

    if not HAS_DOCKER_PY:
        module.fail_json(
            msg='The Docker python client is required for this module'
        )

    manager = DockerManager(module)
    manager.run()


from ansible.module_utils.basic import *

main()
